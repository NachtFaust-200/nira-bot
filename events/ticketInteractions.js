const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits, ChannelType } = require('discord.js');
const embedConfig = require('../utils/embedConfig');
const ticketSystem = require('../utils/ticketSystem');

module.exports = {
  name: 'interactionCreate',
  async execute(interaction, client) {
    if (!interaction.isButton()) return;

    try {
      // Gestion des boutons de cr√©ation de tickets
      if (interaction.customId.startsWith('ticket-create-')) {
        const category = interaction.customId.replace('ticket-create-', '');
        const config = ticketSystem.loadConfig();

        if (!config.enabled) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Syst√®me d√©sactiv√©',
            'Le syst√®me de tickets est actuellement d√©sactiv√©.',
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        // V√©rifier si la cat√©gorie existe
        if (!config.categories[category]) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Cat√©gorie invalide',
            'Cette cat√©gorie de ticket n\'existe pas.',
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        // V√©rifier le nombre maximum de tickets
        const userTickets = ticketSystem.getUserTickets(interaction.guild.id, interaction.user.id);
        if (userTickets.length >= config.settings.maxTicketsPerUser) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Limite atteinte',
            `Vous avez d√©j√† ${config.settings.maxTicketsPerUser} tickets ouverts. Fermez-en un avant d'en cr√©er un nouveau.`,
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        // Cr√©er le ticket
        const result = ticketSystem.createTicket(
          interaction.guild.id, 
          interaction.user.id, 
          category, 
          'Ticket cr√©√© via le panneau'
        );

        if (!result.success) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Erreur lors de la cr√©ation',
            result.error,
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        const ticket = result.ticket;
        const categoryInfo = config.categories[category];

        // Cr√©er le salon de ticket avec nom d'utilisateur
        const username = interaction.user.username.toLowerCase().replace(/[^a-z0-9]/g, '');
        const channelName = `ticket-${username}`;
        const channel = await interaction.guild.channels.create({
          name: channelName,
          type: ChannelType.GuildText,
          parent: null,
          permissionOverwrites: [
            {
              id: interaction.guild.id,
              deny: [PermissionFlagsBits.ViewChannel]
            },
            {
              id: interaction.user.id,
              allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ReadMessageHistory]
            }
          ]
        });

        // Ajouter les r√¥les de support
        if (config.settings.supportRole) {
          await channel.permissionOverwrites.create(config.settings.supportRole, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true
          });
        }

        if (config.settings.adminRole) {
          await channel.permissionOverwrites.create(config.settings.adminRole, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true,
            ManageMessages: true
          });
        }

        // Embed de confirmation
        const successEmbed = embedConfig.createSuccessEmbed(
          'üé´ Ticket cr√©√© !',
          `**Votre ticket a √©t√© cr√©√© avec succ√®s !**\n\n**Salon:** ${channel}\n**Cat√©gorie:** ${categoryInfo.emoji} ${categoryInfo.name}`,
          'ticket'
        );

        await interaction.reply({ embeds: [successEmbed], ephemeral: true });

        // Embed dans le salon de ticket
        const ticketEmbed = embedConfig.createEmbedWithFooter(
          'ticket',
          `${categoryInfo.emoji} Ticket #${ticket.id} - ${categoryInfo.name}`,
          `**Bienvenue dans votre ticket !**\n\n**Raison:** ${ticket.reason}\n\n**Merci de d√©crire votre probl√®me en d√©tail. L'√©quipe de support vous r√©pondra bient√¥t !**`,
          interaction.user
        )
        .addFields(
          {
            name: 'üìã Informations du ticket',
            value: `**ID:** \`${ticket.id}\`\n**Cat√©gorie:** ${categoryInfo.name}\n**Statut:** üü¢ Ouvert\n**Cr√©√©:** <t:${Math.floor(ticket.createdAt / 1000)}:R>`,
            inline: true
          },
          {
            name: 'üë• Participants',
            value: `**Cr√©ateur:** ${interaction.user}\n**Support:** ${config.settings.supportRole ? `<@&${config.settings.supportRole}>` : 'Non configur√©'}`,
            inline: true
          }
        );

        // Cr√©er le message de ping pour les support et admins
        let pingMessage = `üé´ **Nouveau ticket cr√©√© !**\n\n`;
        
        if (config.settings.supportRole) {
          pingMessage += `<@&${config.settings.supportRole}> `;
        }
        
        if (config.settings.adminRole) {
          pingMessage += `<@&${config.settings.adminRole}> `;
        }
        
        pingMessage += `\n**Ticket #${ticket.id}** - ${categoryInfo.emoji} ${categoryInfo.name}\n**Cr√©√© par:** ${interaction.user}\n**Raison:** ${ticket.reason}`;

        // Boutons de gestion du ticket
        const row = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId(`ticket-close-${ticket.id}`)
              .setLabel('üîí Fermer')
              .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
              .setCustomId(`ticket-add-${ticket.id}`)
              .setLabel('‚ûï Ajouter')
              .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
              .setCustomId(`ticket-remove-${ticket.id}`)
              .setLabel('‚ûñ Retirer')
              .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
              .setCustomId(`ticket-info-${ticket.id}`)
              .setLabel('‚ÑπÔ∏è Infos')
              .setStyle(ButtonStyle.Primary)
          );

        // Envoyer le message de ping et l'embed
        await channel.send({ content: pingMessage });
        await channel.send({ embeds: [ticketEmbed], components: [row] });

        // Log dans le salon de logs si configur√© (sans ping)
        if (config.settings.logChannel) {
          const logChannel = interaction.guild.channels.cache.get(config.settings.logChannel);
          if (logChannel) {
            const logEmbed = embedConfig.createEmbedWithFooter(
              'ticket',
              'üé´ Nouveau ticket cr√©√©',
              `**Ticket #${ticket.id}** cr√©√© par ${interaction.user}`,
              interaction.user
            )
            .addFields(
              {
                name: 'üìã D√©tails',
                value: `**Cat√©gorie:** ${categoryInfo.name}\n**Salon:** ${channel}\n**Raison:** ${ticket.reason}`,
                inline: true
              }
            );

            await logChannel.send({ embeds: [logEmbed] });
          }
        }

      }
      // Gestion des boutons de fermeture de tickets
      else if (interaction.customId.startsWith('ticket-close-')) {
        const ticketId = interaction.customId.replace('ticket-close-', '');
        const ticket = ticketSystem.getTicket(interaction.guild.id, ticketId);

        if (!ticket) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Ticket non trouv√©',
            'Impossible de trouver ce ticket.',
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        if (ticket.status === 'closed') {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Ticket d√©j√† ferm√©',
            'Ce ticket est d√©j√† ferm√©.',
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        // V√©rifier les permissions
        const config = ticketSystem.loadConfig();
        const isCreator = ticket.userId === interaction.user.id;
        const isSupport = config.settings.supportRole && interaction.member.roles.cache.has(config.settings.supportRole);
        const isAdmin = config.settings.adminRole && interaction.member.roles.cache.has(config.settings.adminRole);
        const canClose = isCreator || isSupport || isAdmin || interaction.member.permissions.has(PermissionFlagsBits.Administrator);

        if (!canClose) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Permissions insuffisantes',
            'Vous n\'avez pas la permission de fermer ce ticket.',
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        const result = ticketSystem.closeTicket(interaction.guild.id, ticket.id, interaction.user.id);
        
        if (!result.success) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Erreur lors de la fermeture',
            result.error,
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        const closeEmbed = embedConfig.createSuccessEmbed(
          'üîí Ticket ferm√©',
          `**Ticket #${ticket.id}** ferm√© avec succ√®s !`,
          'ticket'
        )
        .addFields(
          {
            name: 'üìã Informations',
            value: `**Ferm√© par:** ${interaction.user}\n**Heure:** <t:${Math.floor(Date.now() / 1000)}:F>\n**Dur√©e:** <t:${Math.floor(ticket.createdAt / 1000)}:R>`,
            inline: true
          }
        );

        // Boutons pour fermer ou supprimer le ticket
        const closeRow = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId(`ticket-delete-${ticket.id}`)
              .setLabel('üóëÔ∏è Supprimer le ticket')
              .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
              .setCustomId(`ticket-reopen-${ticket.id}`)
              .setLabel('üîÑ Rouvrir')
              .setStyle(ButtonStyle.Secondary)
          );

        await interaction.reply({ embeds: [closeEmbed], components: [closeRow] });

      }
      // Gestion des boutons d'ajout de participants
      else if (interaction.customId.startsWith('ticket-add-')) {
        const ticketId = interaction.customId.replace('ticket-add-', '');
        
        const addEmbed = embedConfig.createEmbedWithFooter(
          'ticket',
          '‚ûï Ajouter un participant',
          '**Mentionnez la personne que vous voulez ajouter au ticket.**\n\nExemple: `@utilisateur`',
          interaction.user
        );

        await interaction.reply({ embeds: [addEmbed], ephemeral: true });

      }
      // Gestion des boutons de suppression de participants
      else if (interaction.customId.startsWith('ticket-remove-')) {
        const ticketId = interaction.customId.replace('ticket-remove-', '');
        
        const removeEmbed = embedConfig.createEmbedWithFooter(
          'ticket',
          '‚ûñ Retirer un participant',
          '**Mentionnez la personne que vous voulez retirer du ticket.**\n\nExemple: `@utilisateur`',
          interaction.user
        );

        await interaction.reply({ embeds: [removeEmbed], ephemeral: true });

      }
      // Gestion des boutons d'informations
      else if (interaction.customId.startsWith('ticket-info-')) {
        const ticketId = interaction.customId.replace('ticket-info-', '');
        const ticket = ticketSystem.getTicket(interaction.guild.id, ticketId);

        if (!ticket) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Ticket non trouv√©',
            'Impossible de trouver ce ticket.',
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        const config = ticketSystem.loadConfig();
        const categoryInfo = config.categories[ticket.category];
        const statusEmoji = ticket.status === 'open' ? 'üü¢' : 'üî¥';
        const statusText = ticket.status === 'open' ? 'Ouvert' : 'Ferm√©';

        const infoEmbed = embedConfig.createEmbedWithFooter(
          'ticket',
          `‚ÑπÔ∏è Ticket #${ticket.id}`,
          `**Cat√©gorie:** ${categoryInfo.emoji} ${categoryInfo.name}\n**Raison:** ${ticket.reason}\n**Statut:** ${statusEmoji} ${statusText}`,
          interaction.user
        )
        .addFields(
          {
            name: 'üìã Informations',
            value: `**ID:** \`${ticket.id}\`\n**Cr√©√© par:** <@${ticket.userId}>\n**Cr√©√©:** <t:${Math.floor(ticket.createdAt / 1000)}:F>`,
            inline: true
          },
          {
            name: 'üë• Participants',
            value: ticket.participants.map(id => `<@${id}>`).join('\n') || 'Aucun',
            inline: true
          },
          {
            name: '‚è∞ D√©tails',
            value: `**Ferm√©:** ${ticket.closedAt ? `<t:${Math.floor(ticket.closedAt / 1000)}:F>` : 'Non ferm√©'}\n**Ferm√© par:** ${ticket.closedBy ? `<@${ticket.closedBy}>` : 'N/A'}`,
            inline: true
          }
        );

        await interaction.reply({ embeds: [infoEmbed], ephemeral: true });

      }
      // Gestion de la confirmation de r√©initialisation
      else if (interaction.customId === 'ticket-reset-confirm') {
        // Supprimer tous les tickets
        const data = ticketSystem.loadData();
        if (data[interaction.guild.id]) {
          delete data[interaction.guild.id];
          ticketSystem.saveData(data);
        }

        // R√©initialiser la configuration
        const defaultConfig = {
          enabled: false,
          categories: {
            'support': {
              name: 'Support',
              description: 'Aide g√©n√©rale et support',
              emoji: 'üéß',
              color: '#00FF00'
            },
            'bug': {
              name: 'Bug Report',
              description: 'Signaler un bug',
              emoji: 'üêõ',
              color: '#FF0000'
            },
            'suggestion': {
              name: 'Suggestion',
              description: 'Proposer une am√©lioration',
              emoji: 'üí°',
              color: '#FFA500'
            },
            'other': {
              name: 'Autre',
              description: 'Autre demande',
              emoji: 'üìù',
              color: '#0099FF'
            }
          },
          settings: {
            maxTicketsPerUser: 3,
            autoCloseAfterDays: 7,
            requireReason: true,
            allowUserClose: true,
            logChannel: null,
            supportRole: null,
            adminRole: null
          }
        };
        ticketSystem.saveConfig(defaultConfig);

        const resetEmbed = embedConfig.createSuccessEmbed(
          'üîÑ Syst√®me r√©initialis√©',
          '**Le syst√®me de tickets a √©t√© compl√®tement r√©initialis√© !**\n\nTous les tickets ont √©t√© supprim√©s et la configuration a √©t√© remise √† z√©ro.',
          'ticket'
        );

        await interaction.update({ embeds: [resetEmbed], components: [] });

      }
      // Gestion de la suppression de ticket
      else if (interaction.customId.startsWith('ticket-delete-')) {
        const ticketId = interaction.customId.replace('ticket-delete-', '');
        const ticket = ticketSystem.getTicket(interaction.guild.id, ticketId);

        if (!ticket) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Ticket non trouv√©',
            'Impossible de trouver ce ticket.',
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        // V√©rifier les permissions
        const config = ticketSystem.loadConfig();
        const isCreator = ticket.userId === interaction.user.id;
        const isSupport = config.settings.supportRole && interaction.member.roles.cache.has(config.settings.supportRole);
        const isAdmin = config.settings.adminRole && interaction.member.roles.cache.has(config.settings.adminRole);
        const canDelete = isCreator || isSupport || isAdmin || interaction.member.permissions.has(PermissionFlagsBits.Administrator);

        if (!canDelete) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Permissions insuffisantes',
            'Vous n\'avez pas la permission de supprimer ce ticket.',
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        // Supprimer le ticket de la base de donn√©es
        const deleteResult = ticketSystem.deleteTicket(interaction.guild.id, ticket.id);
        
        if (!deleteResult.success) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Erreur lors de la suppression',
            deleteResult.error,
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        const deleteEmbed = embedConfig.createSuccessEmbed(
          'üóëÔ∏è Ticket supprim√©',
          `**Ticket #${ticket.id}** supprim√© avec succ√®s !`,
          'ticket'
        );

        await interaction.reply({ embeds: [deleteEmbed] });

        // Supprimer le salon apr√®s 3 secondes
        setTimeout(async () => {
          try {
            await interaction.channel.delete();
          } catch (error) {
            console.error('Erreur lors de la suppression du salon:', error);
          }
        }, 3000);

      }
      // Gestion de la r√©ouverture de ticket
      else if (interaction.customId.startsWith('ticket-reopen-')) {
        const ticketId = interaction.customId.replace('ticket-reopen-', '');
        const ticket = ticketSystem.getTicket(interaction.guild.id, ticketId);

        if (!ticket) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Ticket non trouv√©',
            'Impossible de trouver ce ticket.',
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        if (ticket.status === 'open') {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Ticket d√©j√† ouvert',
            'Ce ticket est d√©j√† ouvert.',
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        const result = ticketSystem.reopenTicket(interaction.guild.id, ticket.id, interaction.user.id);
        
        if (!result.success) {
          const errorEmbed = embedConfig.createErrorEmbed(
            'Erreur lors de la r√©ouverture',
            result.error,
            'ticket'
          );
          return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        const reopenEmbed = embedConfig.createSuccessEmbed(
          'üîÑ Ticket rouvert',
          `**Ticket #${ticket.id}** rouvert avec succ√®s !`,
          'ticket'
        );

        // Ping les support et admins pour la r√©ouverture
        const config = ticketSystem.loadConfig();
        let reopenPingMessage = `üîÑ **Ticket rouvert !**\n\n`;
        
        if (config.settings.supportRole) {
          reopenPingMessage += `<@&${config.settings.supportRole}> `;
        }
        
        if (config.settings.adminRole) {
          reopenPingMessage += `<@&${config.settings.adminRole}> `;
        }
        
        reopenPingMessage += `\n**Ticket #${ticket.id}** rouvert par ${interaction.user}`;

        await interaction.reply({ content: reopenPingMessage });
        await interaction.followUp({ embeds: [reopenEmbed] });

      }
      // Gestion de l'annulation de r√©initialisation
      else if (interaction.customId === 'ticket-reset-cancel') {
        const cancelEmbed = embedConfig.createEmbedWithFooter(
          'ticket',
          '‚ùå R√©initialisation annul√©e',
          'La r√©initialisation du syst√®me de tickets a √©t√© annul√©e.',
          interaction.user
        );

        await interaction.update({ embeds: [cancelEmbed], components: [] });
      }

    } catch (error) {
      console.error('Erreur dans ticketInteractions:', error);
      
      const errorEmbed = embedConfig.createErrorEmbed(
        'Erreur lors de l\'interaction',
        `Une erreur est survenue.\n\n**Erreur:** \`${error.message}\``,
        'ticket'
      );

      if (interaction.replied || interaction.deferred) {
        await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
      } else {
        await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }
    }
  }
};
